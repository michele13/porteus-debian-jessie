#!/bin/bash
#set -x
# RemasterCow, script for creating module from changes for DebianDog by Fred (fredx181)
 
[ "`whoami`" != "root" ] && exec gsu ${0}
#[ "`whoami`" != "root" ] && exec xterm -geometry 25x3 -e "su - root -c ${0}"


	if [ -f /mnt/live/tmp/modules ]; then
if [ -f /mnt/live/tmp/changes-exit ]; then
yad --title="RemasterCow (create module from changes)" --center --text=" You are running the system with boot option: 'changes=EXIT:/' \n Note that the changes made in this recent session will not be included in the module. " --button="gtk-close:0"
CHNGS="/mnt/live/memory/images/changes-exit"
else
CHNGS="/mnt/live/memory/changes"
fi
else
CHNGS=/live/cow
	fi

devs="$(blkid -o list | grep /dev | grep -E -v "swap|ntfs|vfat" | sort | cut -d" " -f1 | grep -E -v "/loop|sr0|swap" | sed 's|/dev/||g')"
echo $devs
DEVS=`echo $devs | sed 's/ /!/g'`
SETUP=`yad --title="RemasterCow (create module from changes)" --center --text=" This script will create a module from the changes you made to the system.  \n Advised is to run this script from terminal to watch progress.  \n Choose where to create new module, must be on linux filesystem, \n ntfs or fat filesytems are excluded. \n For no dpkg registration check the box 'Disable dpkg registration'" \
--field="*** Click for info about dpkg registration ***:BTN" "sh -c 'echo -e "'" Question 1: What happens if I leave the default Disable dpkg registration box checked? 
 \n Answer 1: The information for the packages included in this module will stay hidden for the system but the module will work any time you decide to load it. It will be safe also to load it on different debian system. The only disadvantage is some dependencies in this module needed for later created modules will be downloaded again and included also in the other module, but this will make possible for every module to work without the need of dependency included in another module. It is recommended to leave it this way. 
\n Question 2: What happens if I uncheck Disable dpkg registration box? 
\n Answer 2: Dpkg registration information from this module will overwrite the information in the main module. It is not a problem if you load this module every time on boot. You need to be sure it is the last module loaded from the system on boot by naming with higher number (02, 03, 04-my-changes.squashfs for example) and it is best to place it inside /live folder. But if you are going to load the module from time to time and like to share it with others safely, do not uncheck the box. 
 \n More general information what Disable dpkg registration do:
 It simply renames /var/lib/dpkg/info, /var/lib/dpkg/status, /var/lib/dpkg/available adding    new at the end. You can extract the content of every module later and make auto-update-safe dpkg database script. You can read how to do this in DebianDog HowTo thread. "'" | yad --title="'"Info dpkg registration"'" --height=550 --width=650 --text-info --wrap --button="'"gtk-close:0"'"'" \
--window-icon="preferences-system" --form  \
--field="  Choose drive to create module on::CB" "$DEVS" \
--field="Type custom name of working directory \n  (e.g. changed):" "" \
--field="Type name for module with extension \n(e.g. 02-changes.squashfs):" "" \
--field=" Disable dpkg registration:CHK" "TRUE" \
--button="gtk-quit:1" --button="gtk-ok:0"`
ret=$?
[[ $ret -eq 1 ]] && exit

DRV="`echo $SETUP | cut -d "|" -f 2`"
WRKDIR="`echo $SETUP | cut -d "|" -f 3`"
SFS="`echo $SETUP | cut -d "|" -f 4`"
DISDPKG="`echo $SETUP | cut -d "|" -f 5`"
echo $DRV
echo $WRKDIR
echo $SFS
echo $DISDPKG
if [ -z "$DRV" ] || [ -z "$WRKDIR" ] || [ -z "$SFS" ]; then
yad --title="RemasterCow (create module from changes)" --center --text=" You probably did not fill in all fields, \n Please run the script again" --button="gtk-close:0"
exit 0
fi
mkdir /mnt/$DRV 2> /dev/null
mount /dev/$DRV /mnt/$DRV 2> /dev/null
if [ -d "/mnt/$DRV/$WRKDIR" ]; then
yad --title="RemasterCow (create module from changes)" --center --text=" Directory "/mnt/$DRV/$WRKDIR" already exists, \n Please run the script again and use other name" --button="gtk-close:0"
exit 0
fi
mkdir -p "/mnt/$DRV/$WRKDIR" # Make new directory.

if [ -e "/mnt/$DRV/$SFS" ]; then
yad --title="RemasterCow (create module from changes)" --center --text=" File "/mnt/$DRV/$SFS" already exists, \n Please run the script again and use other name" --button="gtk-close:0"
exit 0
fi

running(){ ps $1 | grep $1 >/dev/null; }

TOTAL=$(du -cbs --apparent-size "$CHNGS"/* 2> /dev/null | awk 'END {print $1}')

echo "Copying files to /mnt/$DRV/$WRKDIR..."

cp -a $CHNGS/* "/mnt/$DRV/$WRKDIR" &

CPPID=$!

trap "kill $CPPID" 2 15

(
   while running $CPPID; do
    
      COPY=$(du -cbs --apparent-size "/mnt/$DRV/$WRKDIR"/* 2> /dev/null | awk 'END {print $1}')
       
      PERC=$((COPY*100/TOTAL))
      echo $PERC
      sleep 1
   done   
   echo 100
   sleep 1   
) | yad --title="RemasterCow (create module from changes)" --center --height="100" --width="400" --progress --no-buttons --auto-close --text=" Copying files to "/mnt/$DRV/$WRKDIR"... "


echo "Cleaning..."
rm -rf "/mnt/$DRV/$WRKDIR"/etc/fltk
rm -rf "/mnt/$DRV/$WRKDIR"/etc/network
rm -f "/mnt/$DRV/$WRKDIR"/etc/blkid.tab
rm -f "/mnt/$DRV/$WRKDIR"/etc/blkid.tab.old
rm -f "/mnt/$DRV/$WRKDIR"/etc/fstab
rm -f "/mnt/$DRV/$WRKDIR"/var/cache/debconf/templates.dat-old
rm -rf "/mnt/$DRV/$WRKDIR"/var/log
rm -rf "/mnt/$DRV/$WRKDIR"/var/lib/apt/lists
rm -rf "/mnt/$DRV/$WRKDIR"/var/lib/sudo
rm -f "/mnt/$DRV/$WRKDIR"/var/lib/urandom/random-seed
rm -rf "/mnt/$DRV/$WRKDIR"/var/lib/xkb
rm -f "/mnt/$DRV/$WRKDIR"/var/lib/dpkg/available-old
rm -f "/mnt/$DRV/$WRKDIR"/var/lib/dpkg/status-old
rm -f "/mnt/$DRV/$WRKDIR"/var/lib/lock
rm -rf "/mnt/$DRV/$WRKDIR"$HOME/.fltk
rm -f "/mnt/$DRV/$WRKDIR"$HOME/.local/share/recently-used.xbel
rm -rf "/mnt/$DRV/$WRKDIR"$HOME/.local/share/Trash

rm -rf "/mnt/$DRV/$WRKDIR"/{dev,tmp,mnt,media,run,lost+found}
rm -f "/mnt/$DRV/$WRKDIR"/var/lib/alsa/asound.state
rm -f "/mnt/$DRV/$WRKDIR"$HOME/.bash_history
rm -f "/mnt/$DRV/$WRKDIR"$HOME/.xsession-errors
rm -rf "/mnt/$DRV/$WRKDIR"$HOME/.cache
rm -rf "/mnt/$DRV/$WRKDIR"$HOME/.thumbnails
rm -f "/mnt/$DRV/$WRKDIR"/etc/blkid-cache
rm -f "/mnt/$DRV/$WRKDIR"/etc/resolv.conf
rm -rf "/mnt/$DRV/$WRKDIR"/etc/udev/rules.d/70-persistent*
rm -f "/mnt/$DRV/$WRKDIR"/var/lib/dhcp/dhclient.eth0.leases
rm -f "/mnt/$DRV/$WRKDIR"/var/lib/dhcpcd/*.lease
ls "/mnt/$DRV/$WRKDIR"/var/lib/apt/lists | grep -v "lock" | grep -v "partial" | xargs -i rm "/mnt/$DRV/$WRKDIR"/var/lib/apt/lists/{} ; 

ls "/mnt/$DRV/$WRKDIR"/var/cache/apt/archives | grep -v "lock" | grep -v "partial" | xargs -i rm "/mnt/$DRV/$WRKDIR"/var/cache/apt/archives/{} ;

ls "/mnt/$DRV/$WRKDIR"/var/cache/apt | grep -v "archives" | xargs -i rm "/mnt/$DRV/$WRKDIR"/var/cache/apt/{} ;
find "/mnt/$DRV/$WRKDIR" -maxdepth 1 -type l -delete

	if [ "$DISDPKG" = "TRUE" ]; then
mv "/mnt/$DRV/$WRKDIR"/var/lib/dpkg/info "/mnt/$DRV/$WRKDIR"/var/lib/dpkg/infonew
mv "/mnt/$DRV/$WRKDIR"/var/lib/dpkg/status "/mnt/$DRV/$WRKDIR"/var/lib/dpkg/statusnew
mv "/mnt/$DRV/$WRKDIR"/var/lib/dpkg/available "/mnt/$DRV/$WRKDIR"/var/lib/dpkg/availablenew
	fi

cd "/mnt/$DRV/$WRKDIR"

zerosize() {
  find $* | while read file; do
    echo -n "."
    rm -f $file
    touch $file
  done
}

    zerosize usr/share/doc -type f -size +1c
    zerosize usr/share/doc -type l

    zerosize usr/share/man -type f -size +1c
    zerosize usr/share/man -type l


    zerosize usr/share/info -type f -size +1c
    zerosize usr/share/info -type l

    zerosize usr/share/gnome/help -type f -size +1c
    zerosize usr/share/gnome/help -type l

    zerosize usr/share/gtk-doc -type f -size +1c
    zerosize usr/share/gtk-doc -type l

    chown -R man:root usr/share/man
 
    find . -name '.wh.*' -delete

yad --title="RemasterCow (create module from changes)" --center --text=" Now you may want to do some extra cleaning to save more space before creating module with mksquashfs.\n For example: ~/.mozilla  \n Open filemanager in '/mnt/$DRV/$WRKDIR' to do so. \n  When done click the 'CreateModule' button to finally create:\n   '/mnt/$DRV/$SFS'" --button="CreateModule:0" --button="Cancel:1" 
ret=$?
[[ $ret -eq 1 ]] && exit 0

cd /mnt/$DRV
echo "Creating module..."
xterm -T "RemasterCow (create module from changes)" -si -sb -fg white -bg SkyBlue4 -geometry 65x14 -e "mksquashfs "/mnt/$DRV/$WRKDIR" "$SFS" -comp xz -b 512k -Xbcj x86"

yad --title="RemasterCow (create module from changes)" --center --width="400" --text=" Done creating '/mnt/$DRV/$SFS' \n Do you want to remove '/mnt/$DRV/$WRKDIR'? " --button="gtk-yes:0" --button="gtk-no:1"
ret=$?
[[ $ret -eq 1 ]] && exit 0
if [ -d "/mnt/$DRV/$WRKDIR" ]; then
rm -rf "/mnt/$DRV/$WRKDIR"
fi
exit 0
